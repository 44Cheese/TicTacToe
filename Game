#Tic Tac Toe Selfmade

board = [' ' for symbol in range(10)]

def printBoard(board):
    print('   |   |')
    print(' ' + board[1] + ' | ' + board[2] + ' | ' + board[3])
    print('   |   |')
    print('-----------')
    print('   |   |')
    print(' ' + board[4] + ' | ' + board[5] + ' | ' + board[6])
    print('   |   |')
    print('-----------')
    print('   |   |')
    print(' ' + board[7] + ' | ' + board[8] + ' | ' + board[9])
    print('   |   |')

def Won(board, letter):
    le = letter
    return (board[7] == le and board[8] == le and board[9] == le) or (board[4] == le and board[5] == le and board[6] == le) or (
                board[1] == le and board[2] == le and board[3] == le) or (board[1] == le and board[4] == le and board[7] == le) or (
                       board[2] == le and board[5] == le and board[8] == le) or (
                       board[3] == le and board[6] == le and board[9] == le) or (
                       board[1] == le and board[5] == le and board[9] == le) or (board[3] == le and board[5] == le and board[7] == le)

def Free(pos):
    return board[pos] == " "

def inBoard(letter, pos):
    board[pos] = letter

def playerMove():
    run = True
    while run:
        move = input("Choose a position " + symbol + " (1-9)")
        try:
            move = int(move)
            if move > 0 and move < 10:
                if Free(move):
                    run = False
                    inBoard(symbol, move)
                else:
                    print("Already token")
            else:
                print("Try a nother number")
        except:
            print("Please take a number!")
            return playerMove()

def randomR(li):
    import random
    ln = len(li)
    r = random.randrange(0, ln)
    return li[r]

def computerLetter(letter):
    if symbol == "O":
        letter = "X"

    else:
        if symbol == "X":
         letter = "O"

def ComputerMove():
    import symbol
    possiblemoves = [symbol for symbol, letter in enumerate(board) if letter == " " and symbol !=0]
    move = 0

    for letter in [computerLetter, symbol]:
        for i in possiblemoves:
            boardCopy = board[:]
            boardCopy[i] = letter
            if Won(boardCopy, letter):
                move = i
                return move

    openCorners = []
    for i in [1,3,7,9]:
        openCorners.append(i)

    if len(openCorners) > 0:
        move = randomR(openCorners)
        return move

    if 5 in possiblemoves:
        move = 5
        return move

    openEdges = []
    for i in possiblemoves:
        if i in [2,4,6,8]:
            openEdges.append(i)

    if len(openEdges) > 0:
        move = randomR(openEdges)

    return move

def boardFull():
    if board.count(" ")  > 1:
        return False
    else:
        return True

def start():
    answer = input(name + " , u wanna play Tic Tac Toe? (Y/N)")
    if answer.lower() == "y" or answer.lower() == "yes":
            print("Lets start!")
    else:
        return start()

def main():
    printBoard(board)

    while not (boardFull()):
        if not (Won(board, computerLetter)):
            playerMove()
            printBoard(board)
        else:
            print("Sorry " + computerLetter + "has won :c")
            break

        if not (Won(board, symbol)):
            move = ComputerMove()
            if move == 0:
                print("Tie")
            else:
                inBoard(computerLetter(), move)
                print("Cheese placed " + computerLetter() + " in position " + move)
                printBoard(board)
        else:
            print(symbol + " has won! Well done " + name)
            break
    if boardFull(board):
        print("Tie")

while True:
    qanswer = input("Try again (Y/N)? ")
    if qanswer.lower() == "y" or qanswer.lower == "yes":
        board = [" " for symbol in range(10)]
        print("-----------------------------------")
        main()
    else:
        break

# das Spiel
name = input("Hey my name is Cheese? What is ur name? ")

start()

symbol = input("Choose an symbol (X/O) ") # Take a Symbol (X/O)

main()
